// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dmvnorm_arma
arma::vec dmvnorm_arma(arma::mat const& x, arma::vec const& mean, arma::mat const& sigma, bool const logd);
RcppExport SEXP _posteriorAdjustment_dmvnorm_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool const >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_arma(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// dconditional_arma
arma::vec dconditional_arma(arma::mat const& x, arma::mat const& sigma, double const nugget, bool const logd, bool const na_rm);
RcppExport SEXP _posteriorAdjustment_dconditional_arma(SEXP xSEXP, SEXP sigmaSEXP, SEXP nuggetSEXP, SEXP logdSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double const >::type nugget(nuggetSEXP);
    Rcpp::traits::input_parameter< bool const >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< bool const >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(dconditional_arma(x, sigma, nugget, logd, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// dconditional_arma2
arma::vec dconditional_arma2(const arma::mat& x, const arma::sp_mat& A, const arma::sp_mat& B, const arma::mat& sigma0, const double nugget, const bool logd, const bool na_rm);
RcppExport SEXP _posteriorAdjustment_dconditional_arma2(SEXP xSEXP, SEXP ASEXP, SEXP BSEXP, SEXP sigma0SEXP, SEXP nuggetSEXP, SEXP logdSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma0(sigma0SEXP);
    Rcpp::traits::input_parameter< const double >::type nugget(nuggetSEXP);
    Rcpp::traits::input_parameter< const bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< const bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(dconditional_arma2(x, A, B, sigma0, nugget, logd, na_rm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_posteriorAdjustment_dmvnorm_arma", (DL_FUNC) &_posteriorAdjustment_dmvnorm_arma, 4},
    {"_posteriorAdjustment_dconditional_arma", (DL_FUNC) &_posteriorAdjustment_dconditional_arma, 5},
    {"_posteriorAdjustment_dconditional_arma2", (DL_FUNC) &_posteriorAdjustment_dconditional_arma2, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_posteriorAdjustment(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
